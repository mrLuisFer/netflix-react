{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","console","log","fetchData","className","map","movie","loading","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.89c6991b.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// Es la base de los requests\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\n\r\nimport './row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n\tconst [movies, setMovies] = useState([]);\r\n\tconst [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst request = await axios.get(fetchUrl);\r\n\t\t\tsetMovies(request.data.results);\r\n\t\t\tconsole.log(request);\r\n\t\t\treturn request;\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [fetchUrl]);\r\n\r\n\tconst opts = {\r\n\t\theight: '450',\r\n\t\twidth: '100%',\r\n\t\tplayerVars: {\r\n\t\t\tautoplay: 1,\r\n\t\t},\r\n\t};\r\n\r\n\tconst handleClick = (movie) => {\r\n\t\tif (trailerUrl) {\r\n\t\t\tsetTrailerUrl('');\r\n\t\t} else {\r\n\t\t\tmovieTrailer(movie?.name || '')\r\n\t\t\t\t.then((url) => {\r\n\t\t\t\t\tconst urlParams = new URLSearchParams(new URL(url).search);\r\n\t\t\t\t\tsetTrailerUrl(urlParams.get('v'));\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => console.log(error));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<h2>{title}</h2>\r\n\t\t\t<div className=\"row_posters\">\r\n\t\t\t\t{movies.map((movie) => (\r\n\t\t\t\t\t<img\r\n\t\t\t\t\t\tloading=\"lazy\"\r\n\t\t\t\t\t\tonClick={() => handleClick(movie)}\r\n\t\t\t\t\t\tkey={movie.id}\r\n\t\t\t\t\t\tclassName={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n\t\t\t\t\t\tsrc={`${base_url}${\r\n\t\t\t\t\t\t\tisLargeRow ? movie.poster_path : movie.backdrop_path\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t\talt={movie.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t{trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Row;\r\n","const API_KEY = 'f8e9c56c26c77edb383e5d675a419a5b';\r\n\r\nconst requests = {\r\n\tfetchTrending: `/trending/all/week?api_key=${API_KEY}&lenguage=en-US`,\r\n\tfetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n\tfetchTopRated: `/movie/top_rated?api_key=${API_KEY}&lenguage=en-US`,\r\n\tfetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\tfetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\tfetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\tfetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\tfetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './banner.css';\r\n\r\nconst Banner = () => {\r\n\tconst [movie, setMovie] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst request = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n\t\t\tsetMovie(\r\n\t\t\t\trequest.data.results[\r\n\t\t\t\t\tMath.floor(Math.random() * request.data.results.length - 1)\r\n\t\t\t\t]\r\n\t\t\t);\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\tfunction truncate(str, n) {\r\n\t\treturn str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<header\r\n\t\t\tclassName=\"banner\"\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundSize: 'cover',\r\n\t\t\t\tbackgroundImage: `url(\r\n        https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\r\n      )`,\r\n\t\t\t\tbackgroundPosition: 'center center',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div className=\"banner_contents\">\r\n\t\t\t\t<h1 className=\"banner_title\">\r\n\t\t\t\t\t{movie?.title || movie?.name || movie?.original_name}\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className=\"banner_buttons\">\r\n\t\t\t\t\t<button className=\"banner_button\">Play</button>\r\n\t\t\t\t\t<button className=\"banner_button\">My List</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h1 className=\"banner_description\">{truncate(movie?.overview, 155)}</h1>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"banner_fadeBottom\"></div>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useEffect } from 'react';\r\nimport './nav.css';\r\nimport { useState } from 'react';\r\n\r\nconst Nav = () => {\r\n\tconst [show, handleShow] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener('scroll', () => {\r\n\t\t\tif (window.scrollY > 250) {\r\n\t\t\t\thandleShow(true);\r\n\t\t\t} else handleShow(false);\r\n\t\t});\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('scroll');\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className={`nav ${show && 'nav_black'}`}>\r\n\t\t\t<img\r\n\t\t\t\tclassName=\"nav_logo\"\r\n\t\t\t\tsrc=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n\t\t\t\talt=\"Netflix Logo\"\r\n\t\t\t/>\r\n\r\n\t\t\t<img\r\n\t\t\t\tclassName=\"nav_avatar\"\r\n\t\t\t\tsrc=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n\t\t\t\talt=\"Netflix Logo\"\r\n\t\t\t></img>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\nimport './app.css';\n\nfunction App() {\n\tconsole.log('Some trailers are not original, it is because of the API names');\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Nav />\n\t\t\t<Banner />\n\t\t\t<Row\n\t\t\t\ttitle=\"NETFLIX ORIGINALS\"\n\t\t\t\tfetchUrl={requests.fetchNetflixOriginals}\n\t\t\t\tisLargeRow\n\t\t\t/>\n\t\t\t<Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n\t\t\t<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\t\t\t<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\t\t\t<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\t\t\t<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\t\t\t<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\t\t\t<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}